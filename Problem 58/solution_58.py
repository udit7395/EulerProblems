import time
import math

def timing():
    start_time = time.time()
    return lambda x: print("[{:.9f}s] {}".format(time.time() - start_time, x))

def isAPrime(x):
    if x % 2 == 0:
        return False
    for i in range(3, int(math.sqrt(x)) + 1, 2):
        if x % i == 0:
            return False
    return True

timer = timing()
spiral_size = 100001
limit = spiral_size // 2 + 1
prime_counter = 0

"""
The bottom right diagonal sequence [9, 25, 49, 81,...] are squares of odd numbers (2n + 1) ^ 2 => X
The bottom left diagonal sequence [7, 21, 43, 73,...] can then be generated by subracting 2n from above sequence => X - 2n
The top left diagonal sequence [5, 17, 37, 65,...] can then be generated by subracting 2n from the above sequence []=> X - 4n
The top right diagonal sequence [3, 13, 31, 57,...] can then be generated by subracting 2n from above sequence => X - 6n
"""

for n in range(1, limit):
    twice_n = 2 * n
    X = ((twice_n + 1) ** 2)
    bottom_left = X - twice_n
    top_left = bottom_left  - twice_n
    top_right = top_left - twice_n
    number_of_diagonal_elements = (n * 2 + 1) * 2 - 1
    if isAPrime(top_right):
        prime_counter += 1
    if isAPrime(top_left):
        prime_counter += 1
    if isAPrime(bottom_left):
        prime_counter += 1
    ratio = (prime_counter / number_of_diagonal_elements) * 100
    if ratio < 10:
        timer("the side length of the square spiral for which the ratio of primes along both diagonals first falls below 10% is {}".format((number_of_diagonal_elements + 1) // 2))
        break
